#!/usr/bin/env python
# encoding: utf-8
"""Uebernimmt alle offenen Kommissionierbelege aus der Soft-Schnittstelle ISA00, legt
einen Lieferscheinsatz (==Komissionierbeleg) in Django an und schreibt die Daten in den kernelE.
Der Status des Satzes in ISA00 wird dann auf "X" gesetzt.

Created by Lars Ronge, Maximillian Dornseif on 2007-12-07, 2007-12-19.
Rewritten by Maximillian Dornseif 2008-12.
Copyright (c) 2007, 2008 HUDORA GmbH.
"""

__revision__ = "$Revision: 7323 $"


# From http://superjared.com/entry/django-and-crontab-best-friends/
from django.core.management import setup_environ
import settings
setup_environ(settings)

from django.contrib.admin.models import LogEntry, ADDITION, CHANGE
from django.contrib.contenttypes.models import ContentType
from django.db import transaction
from husoftm.lagerschnittstelle import ISA00
from logistik.softm_shippment import SoftmItem, SoftmLieferung
from mypl.kernel import Kerneladapter
from mypl.models import Lieferschein, LieferscheinPosition
from optparse import OptionParser
import cs.messaging as messaging
import cs.zwitscher
import datetime
import husoftm.lieferscheine
import mypl.models
import sys

parser = OptionParser(version=True)
parser.version = "%%prog %s (mypl.models %s)" % (__revision__.strip('$Revision: '),
                                                   mypl.models.__revision__.strip('$Revision: '))
parser.description = (__doc__)
parser.set_usage('usage: %prog [options]')
parser.add_option('--dry-run', action='store_true', help='Keine Daten in PostgreSQL und Kernel')
parser.add_option('--debug', action='store_true', help='Debugging Informationen ausgeben')
parser.add_option('--maxnum', type='int',
                  help='Maximum number of rows to trasfer before exiting [defaut: unlimited]')
parser.add_option('--highpriority', action='store_true',
                  help='Set orders to extra high priority')
parser.add_option('--fixonly', action='store_true',
                  help='Only transfer "Fixtermin" orders.')
parser.add_option('--maxdate', action='store', type='string', default='9999-12-31',
                  help='Only transfer Kommibelege for dates equal/below <maxdate>. [default: %default]')
parser.add_option('--komminr', action='append', type='int',
                  help='Only transfer Kommibelege with <komminr>. Option can be used more than once.')
parser.add_option('--auftragsnr', action='append', type='int',
                  help='Only transfer Kommibelege for <auftragsnr>. Option can be used more than once.')

                      
options, args = parser.parse_args()
if args:
    parser.error("incorrect number of arguments")


def transfer_kommis():
    "Handeles the transfer of data SoftM/ISA00 -> Django/Lieferschein -> kernelE/provisioningpipeline"
    
    chan = messaging.setup_queue('erp.cs-wms.kommiauftrag', durable=True)
    
    _import_kommi_from_softm(chan)
    # todo: update calculated logistics value like total_weight
    _update_kommi_fields()
    _export_kommi_to_kernel()
    

def _import_kommi_from_softm(chan):
    """Pulls Delivery Notes from SoftM (ISA00) and writes them into the django database."""
    
    isa00 = ISA00()
    isa00.clean_stale_locks()
    rows = isa00.available_rows(fields="IAKBNR, IAAUFN, IASANR, IALGNR")
    if options.maxnum:
        rows = rows[:options.maxnum]
    
    for row in rows:
        komminr, auftragsnr, satznr, lagernr = row
        
        if int(lagernr) != 100:
            if options.debug:
                print "wrong warehouse", komminr, lagernr
            continue
        
        if options.komminr and komminr not in options.komminr:
            continue
        
        if options.auftragsnr and auftragsnr not in options.auftragsnr:
            continue
        
        if options.debug:
            print komminr, auftragsnr, satznr, lagernr,
        
        try:
            softmschein = husoftm.lieferscheine.Kommibeleg(komminr)
        except ValueError, msg:
            msg = ("Kommibeleg %s fehlerhaft (Auftrag %s, ISA00-Satz %s): %s"
                   % (komminr, auftragsnr, satznr, msg))
            print msg
            cs.zwitscher.zwitscher(msg, username='mypl')
            continue
        
        if not softmschein.liefer_date:
            errormsg = "Fehlendes Lieferdatum"
            msg = ("Kommibeleg %s fehlerhaft (Auftrag %s, ISA00-Satz %s): %s"
                   % (komminr, auftragsnr, satznr, errormsg))
            cs.zwitscher.zwitscher(msg, username='mypl')
            softmschein.liefer_date = datetime.date.today()
            # TODO: direkt stornieren
        if str(softmschein.liefer_date) > options.maxdate:
            if options.debug:
                print "wrong date", komminr, softmschein.liefer_date
            continue
        
        if options.fixonly and softmschein.fixtermin == False:
            if options.debug:
                print "not a fixtermin", komminr
            continue
        
        if options.debug:
            print "locking", row
        lock_handle = isa00.lock(komminr)
        
        if not lock_handle:
            # we couldn't lock the row, try next
            if options.debug:
                print "couldn't lock the row", komminr
            continue
        
        # Datensatz ist gelockt, wir koennen damit arbeiten
        
        doc = messaging.empty_message('mypl.import_umlagerungen/%s' % __revision__,
                                      guid="%s-%s" % (komminr, kommiposition),
                                      audit_trail='import_umlagerungen',
                                      audit_info='Auftrag aus SoftM',
                                      kommiauftragsnr=komminr,
                                      liefertermin=softmschein.anlieferdatum,
                                      # liefertermin:	Termin, an dem die Ware spätestens beim Kunden sein muß
                                      # fixtermin:	Wenn True: Zuspätlieferung kann erhebliche Kosten nach sich ziehen.
                                      # gewicht:	Netto gewicht der Ware in Gramm
                                      # volumen:	Netto Volumen der Ware in Liter
                                      info_kunde=softmschein.auftragsnr_kunde,
                                      auftragsnr=softmschein.auftragsnr,
                                      kundenname=' '.join([softmschein.name1, softmschein.name2, softmschein.name13]),
                                      kundennr=softmschein.warenempfaenger,
                                      name1=softmschein.name1,
                                      name2=softmschein.name2,
                                      name3=softmschein.name3,
                                      strasse=softmschein.strasse,
                                      land=softmschein.land,
                                      plz=softmschein.plz,
                                      ort=softmschein.ort,
                                     )
        messaging.publish(doc, 'erp.cs-wms.kommiauftrag')
        
        # TODO: remove
        open('/tmp/kommiauftrag.py', 'w').write(repr(doc))
        
        # TODO: this takes 0.5 seconds - why?
        # md: no index?
        if Lieferschein.objects.filter(kommissionierbelegnr=komminr).count() > 0:
            msg = ("Kommibeleg %s existiert bereits in Django (ISA00-Satz %s)") % (komminr,
                                                                                   satznr)
            print msg
            cs.zwitscher.zwitscher(msg, username='mypl')
            continue # thi leaves a stale lock
        
        # generate Lieferschein object in Django
        kommibeleg = Lieferschein()
        _softm2django(komminr, softmschein)
        if not options.dry_run:
            # delete enty in ISA00
            isa00.delete(lock_handle)
        
        if options.debug:
            print "unlocking", row, kommibeleg
        isa00.unlock(lock_handle)
    

@transaction.commit_on_success # this SHOULd ensure that we never hafe a half-saved record
def _softm2django(komminr, softmschein):
    """Gets Delivery-Note from SoftM by Delivery-Note-No."""
    
    kommibeleg = Lieferschein()
    
    kommibeleg.kommissionierbelegnr = komminr
    kommibeleg.name1 = softmschein.name1
    kommibeleg.name2 = softmschein.name2
    kommibeleg.name3 = softmschein.name3
    kommibeleg.strasse = softmschein.strasse
    kommibeleg.land = softmschein.land
    kommibeleg.plz = softmschein.plz
    kommibeleg.ort = softmschein.ort
    kommibeleg.tel = getattr(softmschein, 'tel', '')
    kommibeleg.fax = getattr(softmschein, 'fax', '')
    kommibeleg.mail = getattr(softmschein, 'mail', '')
    kommibeleg.mobil = getattr(softmschein, 'mobil', '')
    kommibeleg.liefertermin = softmschein.anlieferdatum
    kommibeleg.kundennr = softmschein.lieferadresse.kundennr
    kommibeleg.auftragsnr = softmschein.auftragsnr
    kommibeleg.auftragsnr_kunde = softmschein.auftragsnr_kunde
    kommibeleg.warenempfaenger = softmschein.warenempfaenger
    kommibeleg.liefer_date = softmschein.liefer_date
    kommibeleg.lager = softmschein.lager
    kommibeleg.satznummer = softmschein.satznr

    if not kommibeleg.liefertermin:
        kommibeleg.liefertermin = datetime.datetime.now()
    
    if not options.dry_run:
        kommibeleg.save()
        LogEntry.objects.log_action(0, ContentType.objects.get_for_model(Lieferschein).id,
                                    kommibeleg.id, unicode(kommibeleg), ADDITION,
                                    'Kommibeleg aus SoftM gelesen.') 
    
    for position in softmschein.positionen:
        position_object = LieferscheinPosition()
        position_object.artnr = position.artnr
        position_object.auftrags_position = position.auftrags_position
        position_object.setartikel = position.setartikel
        position_object.kommissionierbeleg_position = position.kommissionierbeleg_position
        position_object.kommissionierbelegnr = position.kommissionierbelegnr
        position_object.menge_komissionierbeleg = position.menge_komissionierbeleg
        position_object.menge = position.menge
        position_object.menge_offen = position.menge_offen
        position_object.satznummer = position.satznr
        
        if not options.dry_run:
            kommibeleg.lieferscheinposition_set.add(position_object)
    
    # Non-Standard Fields
    kommibeleg.versandart = softmschein.versandart
    kommibeleg.fixtermin = softmschein.fixtermin
    kommibeleg.auftragsart = softmschein.art
    kommibeleg.total_weight = 0
    kommibeleg.total_volume = 0
    
    kommibeleg.status = 'new'
    if not options.dry_run:
        kommibeleg.save()
        LogEntry.objects.log_action(0, ContentType.objects.get_for_model(Lieferschein).id,
                                    kommibeleg.id, unicode(kommibeleg), CHANGE,
                                    '%d Positionen aus SoftM übernommen.' % len(softmschein.positionen)) 
    
    return kommibeleg
    

def _update_kommi_fields():
    """Updates fields fo not-yet-transfered kommibelege with additional information."""
    for kommibeleg in Lieferschein.objects.filter(status='new'):
        komminr = kommibeleg.kommissionierbelegnr
        softmschein = husoftm.lieferscheine.Kommibeleg(komminr)
        if options.debug:
            print "updating", kommibeleg
        # Berechnung logistischer Werte pyShipping/logistik.softm_shippment macht all das "heavy lifting"
        lieferung = SoftmLieferung()
        
        if softmschein.fixtermin or softmschein.art == 'WA':
            lieferung.fixtermin = True
        
        lieferung.auftragsart = softmschein.art
        if hasattr(softmschein, "anliefertermin"):
            print "softmschein.anliefertermin", softmschein.anliefertermin
            lieferung.liefertermin = softmschein.anliefertermin
        else:
            print "kommibeleg.liefer_date",  kommibeleg.liefer_date
            lieferung.liefertermin = kommibeleg.liefer_date
        lieferung.versandart = kommibeleg.versandart

        for position in kommibeleg.lieferscheinposition_set.all():
            logisticpos = SoftmItem()
            logisticpos.artnr = position.artnr
            logisticpos.menge = position.menge_komissionierbeleg
            lieferung.itemlist.append(logisticpos)
        
        # TODO: calculate versanddatum
        #  = lieferung.versanddatum
        kommibeleg.kep = lieferung.kep
        kommibeleg.anbruch = lieferung.anbruch
        # TODO: versandtermin oder versanddatum?
        kommibeleg.versandtermin = lieferung.versandtermin
        kommibeleg.versanddatum = lieferung.versandtermin
        kommibeleg.total_weight = lieferung.gewicht
        kommibeleg.total_volume = lieferung.volumen
        kommibeleg.paletten = lieferung.paletten
        kommibeleg.export_kartons = lieferung.export_kartons
        # kommibeleg.kommidatum = lieferung.kommidatum
        # max_packstueck_gewicht
        # packstuecke
        # picks
        # transportweg
        # transportzeit
        kommibeleg.status = 'ready_for_kernel'
        kommibeleg.save()
    

def _export_kommi_to_kernel():
    """Pushes unprocessed Lieferschein objects into kernel."""
    for kommibeleg in Lieferschein.objects.filter(status='ready_for_kernel'):
        if options.debug:
            print "transfering to kernel", kommibeleg
        komminr = kommibeleg.kommissionierbelegnr
        softmschein = husoftm.lieferscheine.Kommibeleg(komminr)
        
        Kerneladapter().insert_pipeline(
            kommibeleg.kommissionierbelegnr,
            _get_orderlines_for_kernel(kommibeleg),
            5, # We always start with Priority 5
            kommibeleg.warenempfaenger,
            kommibeleg.total_weight,
            kommibeleg.total_volume,
            {'auftragsnummer': kommibeleg.auftragsnr,
             # TODO: remove liefertermin from Kernel
             'liefertermin': kommibeleg.liefer_date.strftime("%Y-%m-%d"),
             # FIXME diese attribute scheint es nicht zu geben im SoftM Lieferschein/Kommibeleg
             #'anliefertermin_min': softmschein.anliefertermin_min.strftime("%Y-%m-%d"),
             #'anliefertermin_max': softmschein.anliefertermin_max.strftime("%Y-%m-%d"),
             'versandtermin': kommibeleg.get_versandtermin().strftime("%Y-%m-%d"),
             'kundenname': softmschein.name1,
             'land': softmschein.land,
             'plz': softmschein.plz,
             'art': softmschein.art,
             'fixtermin': softmschein.fix,
             #'anbruch': kommibeleg.anbruch,
             #'kep': kommibeleg.kep,
             #'packstuecke': kommibeleg.packstuecke,
             #'paletten': kommibeleg.paletten,
             #'picks': kommibeleg.picks,
             #'versandpaletten': kommibeleg.versandpaletten,
             #'max_packstueck_gewicht': kommibeleg.max_packstueck_gewicht,
            })
        kommibeleg.status = 'in_mypl'
        kommibeleg.save()
        LogEntry.objects.log_action(0, ContentType.objects.get_for_model(Lieferschein).id,
                                    kommibeleg.id, unicode(kommibeleg), CHANGE,
                                    'An den Kernel übergeben.') 
    

def _get_orderlines_for_kernel(kommibeleg):
    """Gets the orderline-tuple to submit it via insert_pipeline"""
    orderlines = []
    for position in kommibeleg.lieferscheinposition_set.all():
        pos_params = {"auftragsposition": position.kommissionierbeleg_position,
                      "gewicht": position.weight_to_pick()}
        orderlines.append((position.menge_komissionierbeleg, position.artnr, pos_params))
    return orderlines
    

def main():
    #import cProfile
    #cProfile.run("transfer_kommis()", sort=1)
    transfer_kommis()

if __name__ == "__main__":
    sys.exit(main())
