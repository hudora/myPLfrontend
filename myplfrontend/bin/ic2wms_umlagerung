#!/usr/bin/env python
# encoding: utf-8
"""Uebernimmt Umlagerungsauftraege an Lager ein Lager aus der SoftM-Schnittstelle ISK00 und
schreibt die als Warenzugangsmeldungen in eine Nachrichtenschlange.

http://blogs.23.nu/disLEXia/2007/12/antville-16699/ beschreibt die GrundsÃ¤tze der Nutzung
der SoftM Schnittstellen.

Die Warenzugangsmeldungen werden in
http://github.com/hudora/huTools/blob/master/doc/standards/messaging_ic-wms.markdown#readme beschrieben.

Created by Lars Ronge on 2007-12-12.
Rewritten by Maximillian Dornseif 2008-12 and 2009-12.
Copyright (c) 2007-2010 HUDORA GmbH.
"""

import cs.messaging as messaging
import cs.zwitscher
from cs.messaging.journal import write_journal
import huTools.NetStringIO as NetStringIO
import husoftm.lagerschnittstelle
import husoftm.lieferscheine
import optparse
import sys
import time
import os.path
import logging


LOGGER = logging.getLogger(os.path.basename(__file__))
rowcounter = 0


def transfer_umlagerungen(lager):
    "Handles the transfer of data SoftM/ISA00 -> messages"
    global rowcounter
    
    isk00 = husoftm.lagerschnittstelle.ISK00()
    isk00.clean_stale_locks()
    rows = isk00.available_rows(fields="IKKBNR, IKKPOS, IKRMNG, IKSANR")
    outqueuename = u"%s#%s" % (options.out_queue, lager)
    messaging.setup_queue(outqueuename, durable=True)
    LOGGER.info("Starting with oputput to %s..." % (outqueuename))

    if rows:
        LOGGER.info("Processing Messages")
    for row in rows:
        komminr, kommiposnr, menge, satznr = row
        artnr, lagernr = husoftm.lieferscheine.kbpos2artnr_zugangslager(komminr, kommiposnr)

        if int(lagernr) != lager:
            continue

        LOGGER.debug("%r" % ([komminr, kommiposnr, menge, satznr, artnr, lagernr]))

        rowcounter += 1
        if options.maxnum and (rowcounter > options.maxnum):
            LOGGER.info("Maximum number of messages reached, exiting")
            sys.exit(0)

        lock_handle = isk00.lock(satznr)
        # We actually have a (small) race condition here, but duplicate messages are no problem
        if not lock_handle:
            # we couldn't lock the row, try next
            if options.debug:
                print "couldn't lock the row", komminr
            continue

        doc = messaging.empty_message('ic2wms_umlagerung',
                                      guid="%s-%s" % (komminr, kommiposnr),
                                      audit_trail='import_umlagerungen',
                                      audit_info='Auftrag aus SoftM')
        doc.update(dict(batchnr=komminr,
                        menge=menge,
                        artnr=artnr,
                        referenzen={'kommiposnr': kommiposnr, 'charge': ''}))

        LOGGER.debug(doc)

        if not options.dry_run:
            # log file for replaying in case of errors
            write_journal(doc)
            if menge > 0:
                messaging.publish(doc, outqueuename)
                messaging.publish(doc, 'log.%s' % outqueuename)
            else:
                LOGGER.info("loesche position mit leerer menge")
            isk00.delete(lock_handle)
        isk00.unlock(lock_handle)


def main():
    """main function - option parsing and calling of transfer_umlagerungen()."""

    global options
    parser = optparse.OptionParser()
    parser.description = ('Uebernimmt Umlagerungsauftraege aus der Soft-Schnittstelle ISK00 und '
                         + 'erzeugt Warenzugangsmeldungen')
    parser.set_usage('usage: %prog [options]')
    parser.add_option('--lager', type="int", action='append', help='Lager, das bearbeitet werden soll')
    parser.add_option('--out', dest='out_queue', help='Queue to send messages to.\nEg.: --out=erp.ic-wms.warenzugang')
    parser.add_option('--log', default='/var/log/ic2wms_umlagerung.log',
                      help='Wo sollen die Nachrichten protokolliert werden? [%default]')
    parser.add_option('--continuous', action='store_true',
                      help='Run continuously forever')
    parser.add_option('--sleep', type="int", default=47,
                      help='Pause zwischen Durchlaeufen, wenn --continuous verwendet wird [%default s]')
    parser.add_option('--quiet', action='store_true', help='Uebliche Ausgaben unterdruecken')
    parser.add_option('--debug', action='store_true', help='Debugging Informationen ausgeben')
    parser.add_option('--dry-run', action='store_true', help='Keine Nachrichten absenden und loeschen')
    parser.add_option('--maxnum', type='int',
                      help='Maximale Anzahl der zu transferierenden Datensaetze [default: unlimited]')

    options, args = parser.parse_args()
    if args:
        parser.error("incorrect number of arguments")
    if not options.lager:
        parser.error("'--lager' nicht gesetzt")
    if not options.out_queue:
        parser.error("'--out' nicht gesetzt")

    if options.debug:
        LOGGER.setLevel(logging.DEBUG)
    elif options.quiet:
        LOGGER.setLevel(logging.ERROR)
    else:
        LOGGER.setLevel(logging.INFO)

    while True:
        for lager in options.lager:
            transfer_umlagerungen(lager)
        if not options.continuous:
            break
        time.sleep(options.sleep)

    return 0


if __name__ == "__main__":
    sys.exit(main())
