#!/usr/bin/env python
# encoding: utf-8
"""Uebernimmt Umlagerungsauftraege an Lager ein Lager aus der SoftM-Schnittstelle ISK00 und
schreibt die als Warenzugangsmeldungen in eine Nachrichtenschlange.

http://blogs.23.nu/disLEXia/2007/12/antville-16699/ beschreibt die GrundsÃ¤tze der Nutzung
der SoftM Schnittstellen.

Die Warenzugangsmeldungen werden in
http://github.com/hudora/huTools/blob/master/doc/standards/messaging_ic-wms.markdown#readme beschrieben.

Created by Lars Ronge on 2007-12-12.
Rewritten by Maximillian Dornseif 2008-12 and 2009-12.
Copyright (c) 2007-2010 HUDORA GmbH.
"""

import cs.messaging as messaging
import cs.zwitscher
import huTools.NetStringIO as NetStringIO
import husoftm.lagerschnittstelle
import husoftm.lieferscheine
import husoftm.warenzugangsschnittstelle
import itertools
import optparse
import simplejson as json
import sys
import time


rowcounter = 0


def display(msg):
    """Display messages based on command line options."""
    if options.debug or (not options.quiet):
        print (msg)
        sys.stdout.flush()


def write_journal(doc):
    """Write journal entrys of incoming messages."""
    logdata = json.dumps(doc, sort_keys=True, separators=(',', ':'))
    nstring = NetStringIO.NetStringIO(open(options.log, 'a'))
    nstring.write(logdata)
    nstring.file.close()


def transfer_umlagerungen():
    "Handles the transfer of data SoftM/ISA00 -> messages"
    global rowcounter
    
    isk00 = husoftm.lagerschnittstelle.ISK00()
    isk00.clean_stale_locks()
    rows = isk00.available_rows(fields="IKKBNR, IKKPOS, IKRMNG, IKSANR")
    messaging.setup_queue('erp.ic-wms.warenzugang#%d' % options.lager, durable=True)

    if rows:
        display("Processing Messages")
    for row in rows:
        komminr, kommiposnr, menge, satznr = row
        artnr, lagernr = husoftm.lieferscheine.kbpos2artnr_zugangslager(komminr, kommiposnr)
        display("%r" % ([komminr, kommiposnr, menge, satznr, artnr, lagernr]))
        if int(lagernr) != options.lager:
            if options.debug:
                print "wrong lager"
            continue

        rowcounter += 1
        if options.maxnum and (rowcounter > options.maxnum):
            display("Maximum number of messages reached, exiting")
            sys.exit(0)

        lock_handle = isk00.lock(satznr)
        # We actually have a (small) race condition here, but duplicate messages are no problem
        if not lock_handle:
            # we couldn't lock the row, try next
            if options.debug:
                print "couldn't lock the row", komminr
            continue
            
        doc = messaging.empty_message('ic2wms_einlagerungen',
                                      guid="%s-%s" % (komminr, kommiposnr),
                                      audit_trail='import_umlagerungen',
                                      audit_info='Auftrag aus SoftM')
        doc.update(dict(batchnr=komminr,
                        menge=menge,
                        artnr=artnr,
                        referenzen={'kommiposnr': kommiposnr, 'charge': ''}))

        if options.debug:
            display(doc)

        if not options.dry_run:
            # log file for replaying in case of errors
            write_journal(doc)
            if menge > 0:
                messaging.publish(doc, 'erp.ic-wms.warenzugang#%d' % options.lager)
                messaging.publish(doc, 'log.ic-wms.warenzugang')
            isk00.delete(lock_handle)
        isk00.unlock(lock_handle)


def main():
    """main function - option parsing and calling of transfer_umlagerungen()."""

    global options
    parser = optparse.OptionParser()
    parser.description = ('Uebernimmt Umlagerungsauftraege aus der Soft-Schnittstelle ISK00 und '
                         + 'erzeugt Warenzugangsmeldungen')
    parser.set_usage('usage: %prog [options]')
    parser.add_option('--lager', type="int",
                      help='Lager, das bearbeitet werden soll')
    parser.add_option('--log', default='/var/log/ic2wms_einlagerungen.log',
                      help='Wo sollen die Nachrichten protokolliert werden? [%default]')
    parser.add_option('--continuous', action='store_true',
                      help='Run continuously forever')
    parser.add_option('--sleep', type="int", default=47,
                      help='Pause zwischen Durchlaeufen, wenn --continuous verwendet wird [%default s]')
    parser.add_option('--quiet', action='store_true', help='Uebliche Ausgaben unterdruecken')
    parser.add_option('--debug', action='store_true', help='Debugging Informationen ausgeben')
    parser.add_option('--dry-run', action='store_true', help='Keine Nachrichten absenden und loeschen')
    parser.add_option('--maxnum', type='int',
                      help='Maximale Anzahl der zu transferierenden Datensaetze [default: unlimited]')

    options, args = parser.parse_args()
    if args:
        parser.error("incorrect number of arguments")
    if not options.lager:
        parser.error("'--lager' nicht gesetzt")

    display("Starting ...")
    while True:
        transfer_umlagerungen()
        if not options.continuous:
            break
        time.sleep(options.sleep)

    return 0


if __name__ == "__main__":
    sys.exit(main())
