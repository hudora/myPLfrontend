#!/usr/bin/env python
# encoding: utf-8
"""wmsfilter_versandarten --- Describe Tool here äöü---
"""

# myplfrontend/bin/wmsfilter_versandarten
# Created by Christoph Borgolte on 2010-01-20 for HUDORA.
# Copyright (c) 2010 HUDORA. All rights reserved.

from optparse import OptionParser
import cs.masterdata.article
import cs.messaging as messaging
import huTools.NetStringIO as NetStringIO
import husoftm.lieferscheine
import itertools
import os.path
import signal
import simplejson as json
import sys
import time

# globals
options = None
process_messages = True
channel = None
consumer_tags = []
message_count = 0


# TODO: könnte man auch gut in cs.masterdata.article packen
def get_package_grouping(artnr):
    """Gibt die Bündelungmengen zurück

    >>> get_package_grouping('11007')
    (4, 2, 1)
    """
    product = cs.masterdata.article.eap(artnr=artnr)
    return product.get('products_per_export_package'), product.get('products_per_ve1'), 1


# TODO: könnte man auch gut in cs.masterdata.article packen
def get_packet_weights(artnr, menge):
    """Berechne die Anzahl der Pakete und deren Gewichte

    >>> get_packet_weights('11007', 8)
    [14560, 14560]
    >>> get_packet_weights('11007', 7)
    [14560, 7280, 3640]
    >>> get_packet_weights('11007', 6)
    [14560, 7280]
    >>> get_packet_weights('11007', 5)
    [14560, 3640]
    >>> get_packet_weights('11007', 4)
    [14560]
    >>> get_packet_weights('11007', 3)
    [7280, 3640]
    >>> get_packet_weights('11007', 2)
    [7280]
    >>> get_packet_weights('11007', 1)
    [3640]
    """

    # Hier könnte z.B. stehen:
    # articles_per_box = [2]

    articles_per_box = get_package_grouping(artnr)

    product = cs.masterdata.article.eap(artnr=artnr)
    package_weight = product.get('package_weight')
    if not package_weight:
        cs.zwitscher.zwitscher(u'%r kein Paketgewicht! #warning' % artnr, username='debugger')
        package_weight = 5000
    packets = []
    for n in [x for x in articles_per_box if x is not None]:
        tmp = menge / n
        packets += [package_weight * n] * tmp
        menge %= n
    return packets


# TODO: könnte man auch gut in cs.masterdata.article packen
def get_packet_sizes(artnr):
    """Gibt die Mengen und zugeh. Verpackungsgrößen pro Versandeinheit zurück."""
    product = cs.masterdata.article.eap(artnr=artnr)
    ret = []
    export_package_size = product.get('export_package_size')
    products_per_export_package = product.get('products_per_export_package')
    if export_package_size:
        ret.append((products_per_export_package, export_package_size))
    ve1_size = product.get('ve1_size')
    products_per_ve1 = product.get('products_per_ve1')
    if ve1_size:
        ret.append((products_per_ve1, ve1_size))
    package_size = product.get('package_size')
    if package_size:
        ret.append((1, package_size))
    return ret


def get_packet_girth(artnr, menge):
    """Gibt eine Liste mit Gurtmassen der zu versendenden Pakete zurück."""

    def calc_girth(size_):
        """Berechned das eigentliche Gurtmass."""
        b, h, l = sorted(int(val) for val in size_.lower().split('x'))
        return 2 * b + 2 * h + l

    articles_and_sizes = get_packet_sizes(artnr)
    girths = []
    for mng, sz in articles_and_sizes:
        tmp = menge / mng
        girths += [calc_girth(sz)] * tmp
        menge %= mng
    return girths


def kep(doc):
    """Entscheidet, ob die Sendung mit einem Paketdienstleister verschickt werden kann.

    Hierzu werden die Anzahl der Packstücke, das schwerste Packstück sowie das höchste Gurtmass betrachtet.
    """
    positions = doc['positionen']
    packets = list(reduce(itertools.chain, (get_packet_weights(menge=pos['menge'], artnr=pos['artnr'])
                                            for pos in positions)))

    # Anzahl Packstücke
    if len(packets) > 20:
        return False
    # Gewicht
    if max(packets) > 31500:
        return False
    # Gurtmass
    girths = list(reduce(itertools.chain, (get_packet_girth(menge=pos['menge'], artnr=pos['artnr'])
                                           for pos in positions)))
    if max(girths) > 3000:
        return False
    return True


def display(msg):
    """Display messages based on command line options."""
    # TODO move to messaging.tools (?)
    if options.debug or (not options.quiet):
        print (msg)
        sys.stdout.flush()


def write_journal(doc):
    """Write journal entrys of incoming messages."""
    # TODO move to messaging.tools (?)
    logdata = json.dumps(doc, sort_keys=True, separators=(',', ':'))
    if options.debug:
        print logdata
    nstring = NetStringIO.NetStringIO(open(options.log, 'a'))
    nstring.write(logdata)
    nstring.file.close()


def filter_message(message):
    """Append / Remove information from messages.

    Converts it back to a python type from its json representation first.
    Returns the python type.
    """
    doc = messaging.decode(message.body)
    # replace code below with something more meaningful ...
    versandartschluessel = doc.get('versandartschluessel')
    if not versandartschluessel:
        kommibeleg = husoftm.lieferscheine.Kommibeleg(doc['kommiauftragsnr'])
        versandartschluessel = kommibeleg.versandart
    else:
        # unnötigen Eintrag versandartschluessel aus message entfernen
        del(doc['versandartschluessel'])

    versandartschluessel = int(versandartschluessel)

    # Auswahl der Versandart 
    if kep(doc):
        if versandartschluessel == 11:
            versandart = 'DPD-EXW'
        else:
            versandart = 'DPD'
    else:
        if versandartschluessel == 11:
            versandart = 'DHLfreight-EXW'
        else:
            versandart = 'Maeuler'

    if versandartschluessel == 12:
        versandart = 'Selbstabholer'

    doc['versandart'] = versandart
    return doc


def handle_message(message):
    """Callback function used by channel.basic_consume for processing incoming messages.

    Processed messages will acknowledged, that is they will be deleted from the queue by the messaging system.
    """
    global message_count

    # call filter and publish to outgoing queues
    doc = filter_message(message)
    for queue in options.out_queues:
        messaging.publish(doc, routing_key=queue, chan=channel, exchange=None, durable=options.durable, auto_delete=options.auto_delete)

    # acknowledged message
    message.channel.basic_ack(message.delivery_tag)
    message_count += 1


# Might be used as a signal hander
def cancel_processing():
    """ Stop consuming messages from RabbitMQ """
    global process_messages

    # Do this so we exit our main loop
    process_messages = False
    display("Exiting")
    # Tell the channel you dont want to consume anymore
    for consumer_tag in consumer_tags:
        channel.basic_cancel(consumer_tag)


def parse_commandline():
    """Parse the commandline and return information."""

    parser = OptionParser(version=True)
    parser.description = __doc__
    parser.add_option('--in', dest="in_queues", action='append',
                      help='Name einer Queue, aus der gelesen werden soll. Wird diese Parameter mehrfach '
                      +'angegeben, wird aus mehreren Queues gelesen. Beispiel --in=erp.ic-wms.warenzugang.')
    parser.add_option('--out', dest="out_queues", action='append',
                      help='Name der Queue, in die geschrieben werden soll. Wird diese Parameter mehrfach '
                      +'angegeben, wird die gefilterte Nachricht in alle dieser Queues geschickt.')
    parser.add_option('--quiet', action='store_true', help='Uebliche Ausgaben unterdruecken')
    parser.add_option('--durable', action='store_true', default=True, help='Durable out-queue')
    parser.add_option('--auto-delete', action='store_true', default=False, help='auto_delete out-queue')
    parser.add_option('-d', '--debug', action='store_true', help='Enables debugging mode')
    parser.add_option('-n', '--dry-run', action='store_true',
                      help='Doesnt write anything to file system. No acknowledgment of messages.')

    opts, args = parser.parse_args()
    if len(args) > 0: # we expect no non option arguments
        parser.error('incorrect number of arguments')

    if not opts.in_queues:
        parser.error("'--in' nicht gesetzt")
    if not opts.out_queues:
        parser.error("'--out' nicht gesetzt")

    return opts, args


def main(opts, args):
    """This implements the actual programm functionality"""
    global options
    global channel
    options = opts

    channel = None
    # configure incoming queues
    for qname in options.in_queues:
        channel = messaging.setup_queue(qname, channel=channel, durable=True)
        consumer_tags.append(channel.basic_consume(queue=qname, callback=handle_message))
        display('listening to queue %s w/ consumer_tag %s on channel %s' % (qname, consumer_tags[-1], channel))

    # configure outgoing queues
    for queue in options.out_queues:
        messaging.setup_queue(qname, channel=channel, durable=options.durable, auto_delete=options.auto_delete, exclusive=False)


    # catch Signals
    signal.signal(signal.SIGTERM, lambda signum, stack_frame: cancel_processing())
    signal.signal(signal.SIGINT, lambda signum, stack_frame: cancel_processing())

    display("waiting for messages ...")

    # Loop while process_messages is True - could be set to False by signal handlers
    last_requeue = 0
    while process_messages:
        # Wait for a message and wait for `handle_message` callback beeing called
        channel.wait()
        if time.time() - last_requeue > 3600:
            # every 3600 seconds Request non-acknowledged messages to be re-delivered
            channel.basic_recover(requeue=True)
            last_requeue = time.time()
            display("%d messages processed, recovering channel" % message_count)

    channel.close()
    return 0


if __name__ == '__main__':
    main(*parse_commandline())
