#!/usr/bin/env python
# encoding: utf-8
"""Uebernimmt alle offenen Kommissionierbelege aus der Soft-Schnittstelle ISA00,
und sendet je eine Kommiauftrag Nachricht.
Der Status des Satzes in ISA00 wird dann auf "X" gesetzt.

Siehe
https://cybernetics.hudora.biz/intern/trac/browser/projects/cs/trunk/doc/messaging_ic-wms.rst
zum Nachrichtenformat.

Created by Lars Ronge, Maximillian Dornseif on 2007-12-07, 2007-12-19.
Rewritten by Maximillian Dornseif 2008-12, 2009-12.
Copyright (c) 2007, 2008, 2009 HUDORA GmbH.
"""

__revision__ = "$Revision$"


# From http://superjared.com/entry/django-and-crontab-best-friends/
from django.core.management import setup_environ
import settings
setup_environ(settings)

from logistik.softm_shippment import SoftmItem, SoftmLieferung
import cs.zwitscher
import datetime
import husoftm.kunden
import husoftm.lagerschnittstelle
import husoftm.lieferscheine
import mypl.models
import optparse
import sys


parser = optparse.OptionParser(version=True)
parser.version = "%%prog %s (mypl.models %s)" % (__revision__.strip('$Revision: '),
                                                   mypl.models.__revision__.strip('$Revision: '))
parser.description = (__doc__)
parser.set_usage('usage: %prog [options]')
parser.add_option('--dry-run', action='store_true', help='Keine Daten in PostgreSQL und Kernel')
parser.add_option('--debug', action='store_true', help='Debugging Informationen ausgeben')
parser.add_option('--maxnum', type='int',
                  help='Maximum number of rows to trasfer before exiting [defaut: unlimited]')
parser.add_option('--highpriority', action='store_true',
                  help='Set orders to extra high priority')
parser.add_option('--fixonly', action='store_true',
                  help='Only transfer "Fixtermin" orders.')
parser.add_option('--maxdate', action='store', type='string', default='9999-12-31',
                  help='Only transfer Kommibelege for dates equal/below <maxdate>. [default: %default]')
parser.add_option('--komminr', action='append', type='int',
                  help='Only transfer Kommibelege with <komminr>. Option can be used more than once.')
parser.add_option('--auftragsnr', action='append', type='int',
                  help='Only transfer Kommibelege for <auftragsnr>. Option can be used more than once.')


options, args = parser.parse_args()
if args:
    parser.error("incorrect number of arguments")


def transfer_kommis():
    "Handeles the transfer of data SoftM/ISA00 -> Kommiauftrag messages."

    isa00 = husoftm.lagerschnittstelle.ISA00()
    isa00.clean_stale_locks()
    rows = isa00.available_rows(fields="IAKBNR, IAAUFN, IASANR, IALGNR")
    if options.maxnum:
        rows = rows[:options.maxnum]

    for row in rows:
        komminr, auftragsnr, satznr, lagernr = row

        if options.komminr and komminr not in options.komminr:
            continue

        if options.auftragsnr and auftragsnr not in options.auftragsnr:
            continue

        if options.debug:
            print komminr, auftragsnr, satznr, lagernr,

        softmschein = husoftm.lieferscheine.Kommibeleg(komminr)

        if not softmschein.liefer_date:
            betreuer = husoftm.kunden.get_kundenbetreuer(softmschein.warenempfaenger)
            msg = u'@%s: %s ohne Aniefertermin erfasst #error' % (betreuer, softmschein.auftragsnr)
            zwitscher(msg, username='mypl')
            cs.zwitscher.zwitscher(msg, username='mypl')
            softmschein.liefer_date = datetime.date.today()

        if str(softmschein.liefer_date) > options.maxdate:
            if options.debug:
                print "wrong date", komminr, repr(softmschein.liefer_date)
            continue

        if options.fixonly and softmschein.fixtermin == False:
            if options.debug:
                print "not a fixtermin", komminr
            continue

        if options.debug:
            print "locking", row
        lock_handle = isa00.lock(komminr)
        # We actually have a race condition here, but duplicate messages are no problem

        if not lock_handle:
            # we couldn't lock the row, try next
            if options.debug:
                print "couldn't lock the row", komminr
            continue

        # Datensatz ist gelockt, wir koennen damit arbeiten
        doc = messaging.empty_message('mypl.import_umlagerungen/%s' % __revision__,
                                      guid="%s-%s" % (komminr, satznr),
                                      audit_trail='import_umlagerungen',
                                      audit_info='Auftrag aus SoftM')
        doc.update(dict(kommiauftragsnr=komminr,
                        anliefertermin=softmschein.anlieferdatum,
                        # fixtermin:    Wenn True: Zusp√§tlieferung kann erhebliche Kosten nach sich ziehen.
                        # gewicht:      Netto gewicht der Ware in Gramm
                        # volumen:      Netto Volumen der Ware in Liter
                        info_kunde=softmschein.auftragsnr_kunde,
                        auftragsnr=softmschein.auftragsnr,
                        kundenname=(' '.join([softmschein.name1, softmschein.name2,
                                              softmschein.name13])).strip(),
                        kundennr=softmschein.warenempfaenger,
                        # addressprotocol
                        name1=softmschein.name1,
                        strasse=softmschein.strasse,
                        land=softmschein.land,
                        plz=softmschein.plz,
                        ort=softmschein.ort,
                    ))
        if softmschein.name2:
            doc['name2'] = softmschein.name2
        if softmschein.name2:
            doc['name3'] = softmschein.name3

        # Add kommibelegpositionen to doc
        doc['positionen'] = []
        for position in softmschein.positionen:
            doc['positionen'].append(dict(artnr=position.artnr,
                                          auftrags_position=position.auftrags_position,
                                          setartikel=position.setartikel,
                                          kommissionierbeleg_position=position.kommissionierbeleg_position,
                                          kommissionierbelegnr=position.kommissionierbelegnr,
                                          menge=position.menge_komissionierbeleg,
                                          satznummer=position.satznr))

        # Berechnung logistischer Werte pyShipping/logistik.softm_shippment macht all das "heavy lifting"
        lieferung = SoftmLieferung()

        if softmschein.fixtermin or softmschein.art == 'WA':
            lieferung.fixtermin = True
            doc['fixtermin'] = True

        lieferung.auftragsart = softmschein.art
        lieferung.liefertermin = softmschein.anlieferdatum
        lieferung.versandart = kommibeleg.versandart

        for position in kommibeleg.positionen:
            logisticpos = SoftmItem()
            logisticpos.artnr = position.artnr
            logisticpos.menge = position.menge_komissionierbeleg
            lieferung.itemlist.append(logisticpos)

        kommibeleg.versandtermin = lieferung.versandtermin
        kommibeleg.gewicht = lieferung.gewicht
        kommibeleg.volumen = lieferung.volumen

        if options.debug:
            print doc
        messaging.publish(doc, 'erp.cs-wms.kommiauftrag#%s' % lagernr)

        if not options.dry_run:
            # delete enty in ISA00
            isa00.delete(lock_handle)

        if options.debug:
            print "unlocking", row, kommibeleg
        isa00.unlock(lock_handle)


def main():
    #import cProfile
    #cProfile.run("transfer_kommis()", sort=1)
    transfer_kommis()

if __name__ == "__main__":
    sys.exit(main())
