#!/usr/bin/env python
# encoding: utf-8
""" ic2wms_warenvereinnahmnung

Uebernimmt Einlagerungsaufträge an gegebene Lager aus der SoftM-Schnittstelle ISZ00 und
schreibt die als Warenzugangsmeldungen in eine Nachrichtenschlange.

http://blogs.23.nu/disLEXia/2007/12/antville-16699/ beschreibt die Grundsätze der Nutzung
der SoftM Schnittstellen.

Die Warenzugangsmeldungen werden in
http://github.com/hudora/huTools/blob/master/doc/standards/messaging_ic-wms.markdown#readme beschrieben.


Created by Christoph Borgolte on 11-01-2010 for HUDORA.
Copyright (c) 2009 HUDORA. All rights reserved.
"""


if __name__ == "__main__":
    # From http://superjared.com/entry/django-and-crontab-best-friends/
    from django.core.management import setup_environ
    import settings
    setup_environ(settings)


import cs.messaging as messaging
from cs.messaging.journal import write_journal
import huTools.NetStringIO as NetStringIO
import husoftm.lagerschnittstelle
from husoftm.bestellungen import get_zugaenge_warenvereinnahmungsnr_simple
import optparse
import simplejson as json
import sys
import time
import os.path
import logging


LOGGER = logging.getLogger(os.path.basename(__file__))
rowcounter = 0


def transfer_zugaenge(lager):
    "Handles the transfer of data SoftM/ISZ00 -> messages"

    global rowcounter

    isz00 = husoftm.lagerschnittstelle.ISZ00()
    isz00.clean_stale_locks()

    outqueuename = '%s#%s' % (options.out_queue, lager)
    messaging.setup_queue(outqueuename, durable=True)

    # bestellnr, warenvereinnahmungsnr und satznr
    rows = isz00.available_rows(fields="IZBSTN, IZWVNR, IZSANR")
    if rows:
        LOGGER.debug("Processing Messages")

    for row in rows:
        bestellnr, warenvereinnahmungsnr, satznr = row
        guidbase = "%s-%s" % (bestellnr, warenvereinnahmungsnr)

        lock_handle = isz00.lock(satznr)
        # We actually have a (small) race condition here, but duplicate messages are no problem
        if not lock_handle:
            # we couldn't lock the row, try next
            if options.debug:
                print "couldn't lock the row", guidbase
            continue

        positionen = get_zugaenge_warenvereinnahmungsnr_simple(bestellnr, warenvereinnahmungsnr)
        lager_found = False
        for pos in positionen:
            if pos['lager'] != lager:
                if lager_found:
                    LOGGER.debug("Gleiche Warenvereinnahmungsnr %s, unterschiedliche Lager %s - %s"
                                 % (warenvereinnahmungsnr, lager, pos['lager']))
                continue

            lager_found = True
            rowcounter += 1

            msg = {"guid": "%s-%s" % (guidbase, pos['bestellpos']),
                   "menge": int(float(pos['menge_berechnet'])),
                   "artnr": pos['artnr'],
                   "batchnr": pos['bestellnr'],
                   "referenzen": {'bestellnr': pos['bestellnr'],
                                  'warenvereinnahmungsnr': pos['warenvereinnahmungsnr'],
                                  'bestellposnr': pos['bestellpos']}}

            doc = messaging.empty_message('ic2wms_warenvereinnahmnung',
                                          audit_trail='import_warenzugang',
                                          audit_info='Auftrag aus SoftM ISZ00')
            doc.update(msg)
            LOGGER.debug(msg)

            if not options.dry_run:
                # log file for replaying in case of errors
                write_journal(doc)
                messaging.publish(doc, outqueuename)
                messaging.publish(doc, 'log.%s' % outqueuename)

        if lager_found:
            isz00.delete(lock_handle)
        isz00.unlock(lock_handle)


def main():
    """main function - option parsing and calling of transfer_zugaenge()."""

    global options
    parser = optparse.OptionParser()
    parser.description = ('Uebernimmt Einlagerungsauftraege aus der Soft-Schnittstelle ISZ00 '
                          +' und erzeugt Warenzugangsmeldungen')
    parser.set_usage('usage: %prog [options]')
    parser.add_option('--lager', type="int", action='append', help='Lager, das bearbeitet werden soll')
    parser.add_option('--out', dest='out_queue', help='Queue to send messages to.')
    parser.add_option('--log', default='/var/log/ic2wms_warenvereinnahmnung.log',
                      help='Wo sollen die Nachrichten protokolliert werden?')
    parser.add_option('--continuous', action='store_true',
                      help='Run continuously forever')
    parser.add_option('--sleep', type="int", default=47,
                      help='Pause zwischen Durchlaeufen, wenn --continuous verwendet wird [%default s]')
    parser.add_option('--quiet', action='store_true', help='Uebliche Ausgaben unterdruecken')
    parser.add_option('--debug', action='store_true', help='Debugging Informationen ausgeben')
    parser.add_option('--dry-run', action='store_true', help='Keine Daten in PostgreSQL und Kernel')

    options, args = parser.parse_args()
    if args:
        parser.error("incorrect number of arguments")
    if not options.lager:
        parser.error("'--lager' nicht gesetzt")
    if not options.out_queue:
        parser.error("'--out' nicht gesetzt")

    if options.debug:
        LOGGER.setLevel(logging.DEBUG)
    elif options.quiet:
        LOGGER.setLevel(logging.ERROR)
    else:
        LOGGER.setLevel(logging.INFO)


    LOGGER.info("Starting %r ..." % sys.argv[0])
    while True:
        for lager in options.lager:
            transfer_zugaenge(lager)
        if not options.continuous:
            break
        time.sleep(options.sleep)
    print "%d Nachrichten gesendet." % rowcounter
    return 0


if __name__ == "__main__":
    sys.exit(main())
