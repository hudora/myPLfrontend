#!/usr/bin/env python
# encoding: utf-8
"""mypl_rueckmelde_server - read messages from RabbitMQ and feed them to zwitschr
"""

# mypl/bin/mypl_rueckmelde_server.py
# Created by Maximillian Dornseif on 2009-07-13 for HUDORA.
# Copyright (c) 2009 HUDORA. All rights reserved.

__revision__ = '$Revision $'

import cs.caching
from cs.zwitscher import zwitscher
import datetime
import hashlib
import husoftm.connection
import husoftm.kunden
import husoftm.lieferscheine
import re
import simplejson as json
import time
import unittest
import urllib
import Pyro.util
from amqplib import client_0_8 as amqp
from optparse import OptionParser

# For exiting the proessing loop
process_messages = True
consumer_tag = channel = None


def parse_commandline():
    """Parse the commandline and return information."""
    
    parser = OptionParser(version=True)
    parser.version = "%%prog Rev %s" % (__revision__.strip('$Revision: '))
    parser.description = __doc__
    
    parser.set_usage('usage: %prog [options]. Try %prog --help for details.')
    parser.add_option('-d', '--debug', action='store_true', dest='debug',
                      help='Enables debugging mode')
    parser.add_option('-e', '--erase', action='append',
                      help='Erase this kommiauftragnr without forwarding [%default]')
    parser.add_option('-l', '--loop', action='store_true',
                      help='Run continuesly checking for new messages every --sleep seconds')
    parser.add_option('-s', '--sleep', action='store', type='float', default=2,
                      help='Sleep intervals between processing attempts [%default]')
    parser.add_option('-o', '--output', default='rueckmeldung.log',
                      help='output all Kommischeint to logfile [%default]')
    parser.add_option('-p', '--messagepause', action='store', type='float', default=0.01,
                      help='Sleep intervals between messages [%default]')
    
    options, args = parser.parse_args()
    if len(args) > 0: # we expect no non option arguments
        parser.error('incorrect number of arguments')
    return options, args
    

def init_broker():
    "Init Message Broker Connection"
    conn = amqp.Connection(host="rabbitmq.local.hudora.biz:5672", userid="mypl",
                           password="iajoQuoomu6Woosh7Ief", virtual_host="/", insist=False)
    chan = conn.channel()
    # ensured the required routing is set-up
    chan.exchange_declare(exchange="erp.cs-wms.rueckmeldung#spezial", type="direct",
                          durable=True, auto_delete=False)
    chan.queue_declare(queue="erp.cs-wms.rueckmeldung#spezial", durable=True,
                       exclusive=False, auto_delete=False)
    chan.queue_bind(queue="erp.cs-wms.rueckmeldung#spezial", exchange="erp.cs-wms.rueckmeldung#spezial",
                    routing_key="erp.cs-wms.rueckmeldung#spezial")
    return conn, chan
    

def zurueckmelden(auftragsnr, kommiauftragsnr, positionen, typ='nullen'):
    "Rückmeldung zu SoftM."
    server = husoftm.connection.PyRoMoftSconnection()
    lock_key = datetime.datetime.now().strftime("%m%d%H%M%S")
    rows = server.query('ISR00', fields=['IRKBNR'], condition="IRKBNR=%d"
                        % int(kommiauftragsnr))
    if rows:
        raise RuntimeError("KB already exists %r" % kommiauftragsnr)
        
    for pos in positionen:
        # auftrags_position = 
        pos_sql = dict(IRFNR='01',
                       IRKBNR=int(kommiauftragsnr), # take from auftrag
                       IRKPOS=pos['posnr'],
                       IRAUFN=int(auftragsnr),
                       IRAUPO=int(pos['auftrags_position']),
                       IRDFSL=lock_key)
        if typ == 'nullen':
            pos_sql['IRMENG'] = 0
            pos_sql['IRKZNU'] = 1
        # elif commit_type == 'cancel':
        #     pos_sql['IRMENG'] = 0
        #     pos_sql['IRKZST'] = 1
        # else:
        #     menge = pos['menge']
        #     pos_sql['IRMENG'] = int(pos.menge)
        sqlstr = 'INSERT INTO ISR00 (%s) VALUES (%s)' % (','.join(pos_sql.keys()),
                                                    ','.join([repr(x) for x in pos_sql.values()]))
        try:
            server.insert_raw(sqlstr)
        except Exception, msg:
            zwitscher('PyRO remote exception:' + (''.join(Pyro.util.getPyroTraceback(msg))),
                      username='debugger') 
            raise
    try:
        # set all records to be unlocked
        server.update_raw(("UPDATE ISR00 SET IRDFSL='' WHERE IRKBNR='%s' AND IRDFSL='%s'" % (
                               int(kommiauftragsnr), lock_key)))
    except Exception, msg:
        cs.zwitscher('PyRO remote exception:' + (''.join(Pyro.util.getPyroTraceback(msg))),
                     username='debugger') 
        raise
    # Datensatz an SoftM zurückgemeldet


def decodiere_message(msg):
    hugogramm = json.loads(msg.body)
    if options.debug:
        print hugogramm
    
    hugogramm['kommiauftragnr'] = hugogramm.get('kommiauftragnr', hugogramm.get('kommiauftragsnr')) 
    kommibeleg = husoftm.lieferscheine.Kommibeleg(hugogramm['kommiauftragnr'])
    positionsmapping = {}
    for pos in kommibeleg.positionen:
        positionsmapping[pos.kommissionierbeleg_position] = pos.auftrags_position
    
    for pos in hugogramm['positionen']:
        pos['auftrags_position'] = positionsmapping[pos['posnr']]
    return kommibeleg, hugogramm
    

def log_message(typ, kommibeleg, hugogramm):
    """Information über den vorgang protokollieren."""
    fd = open(options.output, 'w')
    fd.write("%s %s %s %s\n" % (typ, kommibeleg.auftragsnr, hugogramm['kommiauftragnr'],
                 ','.join(["0 mal %s|%s" % (x['artnr'], x['posnr']) for x in hugogramm['positionen']])))
    fd.close()
    

def benachrichtigen(kommibeleg, hugogramm):
    """Den entsprechenden Kundenbetreuer per Zwitschr über das Storno benachrichtigen."""
    betreuer = husoftm.kunden.get_kundenbetreuer(kommibeleg.warenempfaenger)
    zwitscher(u'@%s: %s/%s: %s (Kunde %s)' % (betreuer, kommibeleg.auftragsnr, hugogramm['kommiauftragnr'],
                                        hugogramm['audit_trail'],  kommibeleg.name1), username='mypl')
    

def handle_message(message):
    """ Callback function used by channel.basic_consume."""
    
    # TODO: eigentlich müsste die art der Nachricht noch in der Nachricht codiert sein
    kommibeleg, hugogramm = decodiere_message(message)
    log_message('nullen', kommibeleg, hugogramm)
    zurueckmelden(kommibeleg.auftragsnr, hugogramm['kommiauftragnr'], hugogramm['positionen'], typ='nullen')
    channel.basic_ack(message.delivery_tag)
    benachrichtigen(kommibeleg, hugogramm)
    

# This might go somewhere like a signal handler
def cancel_processing():
    """ Stop consuming messages from RabbitMQ """
    global process_messages
    
    # Do this so we exit our main loop
    print "Exiting"
    process_messages = False
    # Tell the channel you dont want to consume anymore
    channel.basic_cancel(consumer_tag)
    

def main(options):
    """Setum message consuming."""
    global channel, consumer_tag
    
    connection, channel = init_broker()
    consumer_tag = channel.basic_consume(queue = 'erp.cs-wms.rueckmeldung#spezial', callback=handle_message)
    
    signal(SIGTERM, lambda signum, stack_frame: cancel_processing())
    signal(SIGINT, lambda signum, stack_frame: cancel_processing())
    
    if options.debug:
        print "waiting for messages ..."
    
    # Loop while process_messages is True
    while process_messages:
        # Wait for a message
        channel.wait()
    
    channel.close()
    connection.close()
    

options, args = parse_commandline()
main(options)


if __name__ == '__main__':
    main(*parse_commandline())
