#!/usr/bin/env python
# encoding: utf-8
"""
Übernimmt alle offenen Kommissionieraufträge aus der SoftM-Schnittstelle ISA00,
und verschickt eine AMQP-Nachricht für jeden Auftrag.
Der Status des Satzes in ISA00 wird dann auf "X" gesetzt.

Siehe
https://cybernetics.hudora.biz/intern/trac/browser/projects/cs/trunk/doc/messaging_ic-wms.rst
zum Nachrichtenformat.

Created by Lars Ronge, Maximillian Dornseif on 2007-12-07, 2007-12-19.
Rewritten by Maximillian Dornseif 2008-12, 2010-01.
Copyright (c) 2007-2010 HUDORA GmbH.
"""

import cs.messaging as messaging
import cs.zwitscher
import datetime
import husoftm.kunden
import husoftm.lagerschnittstelle
import husoftm.lieferscheine
import husoftm.versandart
import huTools.NetStringIO as NetStringIO
import huTools.hujson as hujson
import logging
import optparse
import simplejson as json
import sys
import time
import httplib2


def write_journal(doc, filename):
    """Write journal entrys of incoming messages."""
    logdata = json.dumps(doc, sort_keys=True, separators=(',', ':'))
    nstring = NetStringIO.NetStringIO(open(filename, 'a'))
    nstring.write(logdata)
    nstring.file.close()


def upload_to_hulogi(komminr, document):
    try:
        http = httplib2.Http(timeout=4)

        #http.add_credentials('u3001','XDR5EKWY2PM6DS')
        #url = 'http://hdhulogi.appspot.com/lager/upload/'
        http.add_credentials('test@example.com','JYJDH5RTYYKX7W')
        url = 'http://localhost:8080/lager/kommiauftrag/upload/KB%s/' % komminr

        headers = { 'content-type': 'application/json' }
        resp, content = http.request(url, 'POST', headers=headers, body=hujson.dumps(document))
    except Exception, ex:
        print "unable to upload KB%s to hdhuLogi: %s" % (komminr, ex)


def transfer_kommis(lager, options):
    "Handles the transfer of data SoftM/ISA00 -> Kommiauftrag messages."
    
    logger = logging.getLogger('ic2wms_kommiauftrag')

    isa00 = husoftm.lagerschnittstelle.ISA00()
    isa00.clean_stale_locks()
    rows = isa00.available_rows(fields="IAKBNR, IAAUFN, IASANR, IALGNR")

    outqueuename = u"%s#%s" % (options.out_queue, lager)
    messaging.setup_queue(outqueuename, durable=True)

    if rows:
        logger.debug("Processing %d rows" % len(rows))
    
    rowcounter = 0
    for row in rows:
        rowcounter += 1
        komminr, auftragsnr, satznr, lagernr = row
        logger.info('%s %s %s %s' % (komminr, auftragsnr, satznr, lagernr))

        if int(lagernr) != lager:
            logger.error('Wrong "lager": should be "%s", is "%s"' % (lagernr, lager))
            continue

        softmschein = husoftm.lieferscheine.Kommibeleg(komminr)


        # Leider kann man in SoftM Aufträuge ohne Liefertermin erfassen.
        # Falls ein Auftrag ohne Liefertermin auftaucht, schicke eine Nachricht an
        # den Kundenbetreuer und setze das Lieferdatum auf 'heute'
        if not softmschein.liefer_date:    
            betreuer = husoftm.kunden.get_kundenbetreuer(softmschein.warenempfaenger)
            msg = u'@%s: %s ohne Aniefertermin erfasst #error' % (betreuer, softmschein.auftragsnr)
            cs.zwitscher.zwitscher(msg, username='mypl')
            softmschein.liefer_date = datetime.date.today()
            softmschein.anlieferdatum = datetime.date.today()

        lock_handle = isa00.lock(komminr)
        # We actually have a (small) race condition here, but duplicate messages are no problem
        if not lock_handle:
            # we couldn't lock the row, try next
            logger.debug("Could not lock the row %s" % komminr)
            continue

        # Datensatz ist gelockt, wir können damit arbeiten
        doc = messaging.empty_message('ic2wms_kommiauftrag',
                                      guid="%s-%s-%s-%s" % (komminr, auftragsnr, satznr, lagernr),
                                      audit_trail='ic2wms_kommiauftrag',
                                      audit_info='Auftrag aus SoftM')
        doc.update(dict(kommiauftragsnr=komminr,
                        anliefertermin=softmschein.anlieferdatum.strftime("%Y-%m-%d"),
                        prioritaet=7, # Wird noch überschrieben, s.u.
                        # anliefertermin_ab
                        # versandtermin
                        # versandtermin_ab
                        # fixtermin:    Wenn True: Zuspätlieferung kann erhebliche Kosten nach sich ziehen.
                        # gewicht:      Netto gewicht der Ware in Gramm
                        # volumen:      Netto Volumen der Ware in Liter
                        kundennr=softmschein.warenempfaenger,
                        info_kunde=softmschein.auftragsnr_kunde,
                        auftragsnr=softmschein.auftragsnr,
                        kundenname=(' '.join([softmschein.name1, softmschein.name2,
                                              softmschein.name3])).strip(),
                        # addressprotocol
                        name1=softmschein.name1,
                        strasse=softmschein.strasse,
                        land=softmschein.land,
                        plz=softmschein.plz,
                        ort=softmschein.ort,
                    ))
        if softmschein.name2:
            doc['name2'] = softmschein.name2
        if softmschein.name2:
            doc['name3'] = softmschein.name3

        # Add kommibelegpositionen to doc
        doc['positionen'] = []
        for position in softmschein.positionen:
            doc['positionen'].append(dict(menge=int(position.menge_komissionierbeleg),
                                          artnr=position.artnr,
                                          # !wms2mypl_kommiauftrag erwartet hier die auftragsposition
                                          # !wms2ic_rueckmeldung erwartet hier die kommibelegposition
                                          posnr=position.auftrags_position,
                                          # text
                                          # EAN
                                          setartikel=(position.setartikel == 1),
                                          kommissionierbeleg_position=position.kommissionierbeleg_position,
                                          auftrags_position=position.auftrags_position,
                                          kommissionierbelegnr=position.kommissionierbelegnr,
                                          satznummer=position.satznr))

        if softmschein.fixtermin or softmschein.art == 'WA':
            doc['fixtermin'] = True

        # den Kommibeleg nach huLogi zur Weiterverarbeitung hochladen
        upload_to_hulogi(komminr, doc)

        # Priorität:
        # 100000 - Normal;
        # 100010 - Fixtermin;
        # 100100 - Werbeauftrag;
        # 100110 - Fixtermin + Werbeauftrag
        doc['prioritaet'] = 100000 + 10 * int(bool(softmschein.fixtermin)) + 100 * int(bool(softmschein.art == 'WA'))

        if softmschein.versandart: # FIXME gibt es wahrscheinlich immer, also ist die if-clause unnütz
            # Beschreibung der Versandart aus SoftM
            # In SoftM werden teilweise auch versandvorschriften in die Versandart gepackt, bspw. Hebebühne.
            # D.h. die Versandart wird von einem späteren Filter nochmals überprüft/verändert.
            # Hier schonmal die Daten aus dem SoftM eintragen
            versandart = husoftm.versandart.versandart(softmschein.versandart)[1]
            doc['versandartschluessel'] = softmschein.versandart
            doc['versandart'] = versandart

        logger.debug(str(doc))

        if not options.dry_run:
            # log file for replaying in case of errors
            write_journal(doc, options.log)
            messaging.publish(doc, outqueuename)
            messaging.publish(doc, 'log.%s' % outqueuename)
            isa00.delete(lock_handle)
        isa00.unlock(lock_handle)
        
        return rowcounter


def main():
    """main function - option parsing and calling of transfer_kommis()."""
    
    parser = optparse.OptionParser()
    parser.description = ('Uebernimmt Kommibelege aus der SoftM-Schnittstelle ISA00 und '
                         + 'erzeugt Kommiauftragsmeldungen')
    parser.set_usage('usage: %prog [options]')
    parser.add_option('--lager', type="int", action='append', help='Lager, das bearbeitet werden soll')
    parser.add_option('--out', dest='out_queue', help='Queue to send messages to.')
    parser.add_option('--log', default='/var/log/ic2wms_kommiauftrag.log',
                      help='Wo sollen die Nachrichten protokolliert werden? [%default]')
    parser.add_option('--continuous', action='store_true',
                      help='Run continuously forever')
    parser.add_option('--sleep', type="int", default=53,
                      help='Pause zwischen Durchlaeufen, wenn --continuous verwendet wird [%default s]')
    parser.add_option('--quiet', action='store_true', help='Uebliche Ausgaben unterdruecken')
    parser.add_option('--debug', action='store_true', help='Debugging Informationen ausgeben')
    parser.add_option('--dry-run', action='store_true', help='Keine Nachrichten absenden und loeschen')
    parser.add_option('--maxnum', type='int',
                      help='Maximale Anzahl der zu transferierenden Datensaetze [default: unlimited]')

    options, args = parser.parse_args()
    if args:
        parser.error("incorrect number of arguments")
    if not options.lager:
        parser.error("'--lager' nicht gesetzt")
    if not options.out_queue:
        parser.error("'--out' nicht gesetzt")

    # Konfiguration des Loggers
    logger = logging.getLogger('ic2wms_kommiauftrag')
    if options.debug:
        logger.setLevel(logging.DEBUG)
    elif options.quiet:
        logger.setLevel(logging.ERROR)
    else:
        logger.setLevel(logging.INFO)

    rowcounter = 0
    while True:
        
        for lager in options.lager:
            rowcounter += transfer_kommis(lager, options)
        if not options.continuous:
            break
        if options.maxnum and rowcounter >= options.maxnum:
            logger.info("Maximum number of messages reached, exiting")
            sys.exit(0)
        time.sleep(options.sleep)


def testing_upload():
    "Handles the transfer of data SoftM/ISA00 -> Kommiauftrag messages."
    
    #komminr = '3174852'
    #komminr = '3142234'
    #komminr = '3142217'
    komminr = '3149385'

    softmschein = husoftm.lieferscheine.Kommibeleg(komminr)

    # Leider kann man in SoftM Aufträuge ohne Liefertermin erfassen.
    # Falls ein Auftrag ohne Liefertermin auftaucht, schicke eine Nachricht an
    # den Kundenbetreuer und setze das Lieferdatum auf 'heute'
    if not softmschein.liefer_date:    
        betreuer = husoftm.kunden.get_kundenbetreuer(softmschein.warenempfaenger)
        msg = u'@%s: %s ohne Aniefertermin erfasst #error' % (betreuer, softmschein.auftragsnr)
        cs.zwitscher.zwitscher(msg, username='mypl')
        softmschein.liefer_date = datetime.date.today()
        softmschein.anlieferdatum = datetime.date.today()

    # Datensatz ist gelockt, wir können damit arbeiten
    auftragsnr = softmschein.auftragsnr
    lagernr = softmschein.lager

    doc = {'guid': '%s-%s-%s-%s' % (komminr, auftragsnr, 'satznr', lagernr),
           'audit_trail': 'ic2wms_kommiauftrag',
           'audit_info': 'Auftrag aus SoftM'}
    doc.update(dict(kommiauftragsnr=komminr,
                    anliefertermin=softmschein.anlieferdatum.strftime("%Y-%m-%d"),
                    prioritaet=7, # Wird noch überschrieben, s.u.
                    # anliefertermin_ab
                    # versandtermin
                    # versandtermin_ab
                    # fixtermin:    Wenn True: Zuspätlieferung kann erhebliche Kosten nach sich ziehen.
                    # gewicht:      Netto gewicht der Ware in Gramm
                    # volumen:      Netto Volumen der Ware in Liter
                    kundennr=softmschein.warenempfaenger,
                    info_kunde=softmschein.auftragsnr_kunde,
                    auftragsnr=softmschein.auftragsnr,
                    kundenname=(' '.join([softmschein.name1, softmschein.name2,
                                          softmschein.name3])).strip(),
                    # addressprotocol
                    name1=softmschein.name1,
                    strasse=softmschein.strasse,
                    land=softmschein.land,
                    plz=softmschein.plz,
                    ort=softmschein.ort,
                ))
    if softmschein.name2:
        doc['name2'] = softmschein.name2
    if softmschein.name2:
        doc['name3'] = softmschein.name3

    # Add kommibelegpositionen to doc
    doc['positionen'] = []
    for position in softmschein.positionen:
        doc['positionen'].append(dict(menge=int(position.menge_komissionierbeleg),
                                      artnr=position.artnr,
                                      # !wms2mypl_kommiauftrag erwartet hier die auftragsposition
                                      # !wms2ic_rueckmeldung erwartet hier die kommibelegposition
                                      posnr=position.auftrags_position,
                                      # text
                                      # EAN
                                      setartikel=(position.setartikel == 1),
                                      kommissionierbeleg_position=position.kommissionierbeleg_position,
                                      auftrags_position=position.auftrags_position,
                                      kommissionierbelegnr=position.kommissionierbelegnr,
                                      satznummer=position.satznr))

    if softmschein.fixtermin or softmschein.art == 'WA':
        doc['fixtermin'] = True

    # den Kommibeleg nach huLogi zur Weiterverarbeitung hochladen
    upload_to_hulogi(komminr, doc)


if __name__ == "__main__":
    main()
