#!/usr/bin/env python
# encoding: utf-8
"""Uebernimmt Umlagerungsauftraege an Lager 100 aus der Soft-Schnittstelle ISK00 und 
schreibt die als Warenzugangsmeldungen in eine Nachrichtenschlange.

http://blogs.23.nu/disLEXia/2007/12/antville-16699/ beschreibt die Grundsätze der Nutzung
der SoftM Schnittstellen.

Die Warenzugangsmeldungen werden in
http://github.com/hudora/huTools/blob/master/doc/standards/messaging_ic-wms.markdown#readme beschrieben.

Created by Lars Ronge on 2007-12-12.
Rewritten by Maximillian Dornseif 2008-12 and 2009-12.
Copyright (c) 2007-2010 HUDORA GmbH.
"""

# From http://superjared.com/entry/django-and-crontab-best-friends/
from django.core.management import setup_environ
import settings
setup_environ(settings)

import cs.messaging as messaging
import cs.zwitscher
import husoftm.lagerschnittstelle
import husoftm.lieferscheine
import optparse
import produktpass.models
import sys


def transfer_umlagerungen():
    "Handeles the transfer of data SoftM/ISA00 -> messages"
    
    isk00 = husoftm.lagerschnittstelle.ISK00()
    isk00.clean_stale_locks()
    rows = isk00.available_rows(fields="IKKBNR, IKKPOS, IKRMNG, IKSANR")
    chan = messaging.setup_queue('erp.ic-wms.warenzugang#%d' % options.lager,
                                 durable=True)
    
    rowcounter = 0
    for row in rows:
        komminr, kommiposition, menge, satznr = row
        artnr, lagernr = husoftm.lieferscheine.kbpos2artnr_lager(komminr, kommipos)
        
        if int(lagernr) != options.lager:
            continue
        
        rowcounter += 1
        if maxnum and (rowcounter > options.maxnum):
            break
        
        if options.debug:
            print komminr, kommiposition, menge, satznr, artnr, lager
        
        if menge < 1:
            msg = 'Umlagerung %s hat Positione ohne Menge (0) fuer %s - interessant #warn' % (komminr, artnr)
            cs.zwitscher.zwitscher(msg, username='mypl')
            if options.debug:
                print msg
        else:
            lock_handle = isk00.lock(satznr)
            doc = messaging.empty_message('einlagerungen_ic2wms',
                                          guid="%s-%s" % (komminr, kommipos),
                                          audit_trail='import_umlagerungen',
                                          audit_info='Auftrag aus SoftM',
                                          batchnr=komminr,
                                          menge=menge,
                                          artnr=artnr,
                                          referenzen={})
            if options.debug:
                print doc
            
            if not options.dry_run:
                messaging.publish(doc, 'erp.ic-wms.warenzugang#%d' % options.lager)
                isk00.delete(lock_handle)
            isk00.unlock(lock_handle)
    


def main():
    """main function - option parsing and calling of transfer_umlagerungen()."""

    global options
    parser = optparse.OptionParser()
    parser.description = ('Uebernimmt Umlagerungsauftraege aus der Soft-Schnittstelle ISK00 und '
                         + 'erzeugt Warenzugangsmeldungen')
    parser.set_usage('usage: %prog [options]')
    parser.add_option('--lager', type="int",
                      help='Lagernummer, dass bearbeitet werden soll')
    parser.add_option('--dry-run', action='store_true', help='Keine Daten in PostgreSQL und Kernel')
    parser.add_option('--debug', action='store_true', help='Debugging Informationen ausgeben')
    parser.add_option('--maxnum', type='int',
                      help='Maximale Anzahl der zu transferierenden Datensätze [default: unlimited]')

    options, args = parser.parse_args()
    if args:
        parser.error("incorrect number of arguments")
    if 'lager' not in options:
        parser.error("'--lager' nicht gesetzt")
    
    transfer_umlagerungen()
    return 0


if __name__ == "__main__":
    sys.exit(main())
