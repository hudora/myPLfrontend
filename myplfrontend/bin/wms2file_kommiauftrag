#!/usr/bin/env python
# encoding: utf-8
"""wms2file_kommiauftrag --- Describe Tool here äöü---
"""

# myplfrontend/bin/wms2file_kommiauftrag
# Created by Christoph Borgolte on 2010-01-18 for HUDORA.
# Copyright (c) 2010 HUDORA. All rights reserved.


from optparse import OptionParser
import datetime
import huTools.protocols
import os
import os.path
import cs.messaging as messaging
import signal
import sys
import simplejson as json
import time
import logging


# globals
LOGGER = logging.getLogger(os.path.basename(__file__))
options = None
process_messages = True
channel = None
consumer_tags = []
message_count = 0


def _create_filename(path):
    """Create an unique filename based upon the process id and the actual timestamp."""
    pid = os.getpid()
    fname = "%s_%s" % (pid, datetime.datetime.now().isoformat().replace(':', '_').replace('.', '_'))
    fname = os.path.join(path, fname)
    assert(os.path.exists(fname) == False)
    return fname


def handle_message(message):
    """Callback function used by channel.basic_consume for writing 'Warenzugang' to file."""
    global message_count

    body = json.loads(message.body)
    if options.debug:
        print body

    xmlstring = huTools.protocols.dicttoxml(body, roottag='kommiauftrag')
    open(_create_filename(options.path), "w").write(xmlstring)
    message.channel.basic_ack(message.delivery_tag)
    message_count += 1


# Might be used as a signal hander
def cancel_processing():
    """ Stop consuming messages from RabbitMQ """
    global process_messages

    # Do this so we exit our main loop
    process_messages = False
    LOGGER.info("Exiting")
    # Tell the channel you dont want to consume anymore
    for consumer_tag in consumer_tags:
        channel.basic_cancel(consumer_tag)

def parse_commandline():
    """Parse the commandline and return information."""

    parser = OptionParser(version=True)
    parser.description = __doc__
    parser.add_option('--lager', type="int", action='append', help='Lager, das bearbeitet werden soll')
    parser.add_option('--in', dest="in_queues", action='append',
                      help='Name der Queue, aus der gelesen werden soll. Wird diese Parameter mehrfach '
                      +'angegeben, wird aus mehreren Queues gelesen. Beispiel --in=erp.ic-wms.warenzugang.')
    parser.add_option('-p', '--path', help='Path where to store the files.')
    parser.add_option('--quiet', action='store_true', help='Uebliche Ausgaben unterdruecken')
    parser.add_option('-d', '--debug', action='store_true', help='Enables debugging mode')
    parser.add_option('-n', '--dry-run', action='store_true',
                      help='Doesnt write anything to file system. No acknowledgment of messages.')

    opts, args = parser.parse_args()
    if len(args) > 0: # we expect no non option arguments
        parser.error('incorrect number of arguments')

    if not opts.lager:
        parser.error("'--lager' nicht gesetzt")
    if not opts.path:
        parser.error("'--path' nicht gesetzt")
    if not opts.in_queues:
        parser.error("'--in' nicht gesetzt")

    if options.debug:
        LOGGER.setLevel(logging.DEBUG)
    elif options.quiet:
        LOGGER.setLevel(logging.ERROR)
    else:
        LOGGER.setLevel(logging.INFO)

    return opts, args


def main(opts, args):
    """This implements the actual programm functionality"""
    global options
    global channel
    options = opts

    channel = None
    for qname in options.in_queues:
        for lager in options.lager:
            inqueuename = "%s#%s" % (qname, lager)
            LOGGER.info('listening to %s ...' % inqueuename)
            channel = messaging.setup_queue(inqueuename, channel=channel, durable=True)
            consumer_tags.append(channel.basic_consume(queue=inqueuename, callback=handle_message))

    # catch Signals
    signal.signal(signal.SIGTERM, lambda signum, stack_frame: cancel_processing())
    signal.signal(signal.SIGINT, lambda signum, stack_frame: cancel_processing())

    LOGGER.info("waiting for messages ...")

    # Loop while process_messages is True - could be set to False by signal handlers
    last_requeue = time.time()
    while process_messages:
        # Wait for a message and wait for `handle_message` callback beeing called
        channel.wait()
        if time.time() - last_requeue > 3600:
            # every 3600 seconds Request non-acknowledged messages to be re-delivered
            channel.basic_recover(requeue=False)
            last_requeue = time.time()
            LOGGER.info("%d messages processed, recovering channel" % message_count)

    channel.close()
    channel.connection.close()
    return 0


if __name__ == '__main__':
    main(*parse_commandline())
